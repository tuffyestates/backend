openapi: 3.0.0
info:
  title: Tuffy Estates
  version: 0.1.0
servers:
  - url: "http://localhost:11638/api"
    description: Local Development Server
  - url: "https://tuffyestates.sparling.us:11638/api"
    description: Staging Server
  - url: "https://tuffyestates.sparling.us:11637/api"
    description: Development Server

# users
tags:
  - name: users
    description: "Everything about users"
  - name: properties
    description: "Everything about Properties"
  - name: messages
    description: "Everything about messages"
paths:
  /:
    get:
      tags:
        - meta
      summary: Request API specification file
      operationId: retrieveApiSpec
      responses:
        "200":
          description: Success
          content:
            application/yaml:
              schema:
                type: string
  /users:
    post:
      tags:
        - users
      summary: Registers a user
      operationId: registerUser
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  $ref: '#/components/schemas/User/properties/username'
                password:
                  $ref: '#/components/schemas/User/properties/password'
      responses:
        "201":
          description: User registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                    description: The token used to authenticate future requests
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/InternalError"
  /users/login:
    post:
      tags:
        - users
      summary: Authenticate a user
      operationId: loginUser
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  $ref: '#/components/schemas/User/properties/username'
                password:
                  $ref: '#/components/schemas/User/properties/password'
      responses:
        '200':
          description: Token authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                    description: The token used to authenticate future requests
        '400':
          $ref: "#/components/responses/BadRequest"
  /users/logout:
    head:
      tags: [users]
      summary: Deauthenticate a user
      operationId: logoutUser
      responses:
        200:
          description: Session token revoked
        400:
          $ref: "#/components/responses/BadRequest"
      security:
        - BearerAuth: []

  # Properties

  /properties:
    post:
      tags: [properties]
      summary: create property
      operationId: createProperty
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Property"
      responses:
        201:
          description: Created property
        400:
          $ref: "#/components/responses/BadRequest"
      security:
        - BearerAuth: []

    patch:
      tags: [properties]
      summary: update property
      operationId: updateProperty
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                address:
                  type: string
                  example: 366 Oakwood Dr.
                  description: Listing's physical address
                details:
                  type: object
                  description: More details about a listing
                  properties:
                    price:
                      type: number
                      example: 980000
                      description: Price of the listing in USD
                    size:
                      type: number
                      example: 3800
                      description: Size of the listing in squarefeet
                    features:
                      type: array
                      example: []
                      description: Features of the listing
                      items:
                        $ref: "#/components/schemas/Property/properties/details/properties/features"
      responses:
        200:
          description: Update Success
        400:
          $ref: "#/components/responses/BadRequest"
      security:
        - BearerAuth: []

  /properties/{id}:
    get:
      tags: [properties]
      summary: Get a property by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          example: 920f73b0d67e11e89f8bf2801f1b9fd1
          description: UUID of the property to get
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Property"
        400:
          $ref: "#/components/responses/BadRequest"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: ironfox449
          x-mongoose-index: true
          x-mongoose-unique: true
          description: Username for the user
          minLength: 3
        password:
          type: string
          example: fox_0f_iron3ss
          description: Password for the user
          minLength: 3
    Message:
      type: object
      required:
        - text
        - author
        - recipient
      properties:
        text:
          type: string
          example: "Hello!"
          description: Message contents
        author:
          type: string
          example: 67677396d64811e89f8bf2801f1b9fd1
          x-mongoose-type: ObjectId
          description: UUID of user that authored the message
        recipient:
          type: string
          example: 720fc17cd64811e89f8bf2801f1b9fd1
          x-mongoose-type: ObjectId
          description: UUID of user that received the message
    Property:
      type: object
      required:
        - address
        - details
        - owner
      properties:
        owner:
          type: string
          example: 720fc17cd64811e89f8bf2801f1b9fd1
          x-mongoose-type: ObjectId
          description: ID of the owner of the property
        address:
          type: string
          example: 7266 South Golf Lane
          description: Property's physical address
        details:
          type: object
          description: More details about a property
          required:
            - price
            - size
          properties:
            price:
              type: number
              example: 1640000
              description: Price of the property in USD
            size:
              type: number
              example: 4710
              description: Size of the property in squarefeet
            features:
              type: array
              example: ['office', 'pool', 'garage']
              description: Features of the property
              items:
                type: string
                enum:
                  - office
                  - garage
                  - fireplace
                  - pool
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                description: Human readable error message
                type: string
                example: This is an error message
    InternalError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                description: Human readable error message
                type: string
                example: This is an error message
