openapi: 3.0.0
info:
  title: Tuffy Estates
  version: 0.1.0
servers:
  - url: "http://localhost:11638/api"
    description: Local Development Server
  - url: "https://tuffyestates.sparling.us:11638/api"
    description: Staging Server
  - url: "https://tuffyestates.sparling.us:11637/api"
    description: Development Server

# users
tags:
  - name: users
    description: "Everything about users"
  - name: properties
    description: "Everything about Properties"
  - name: messages
    description: "Everything about messages"
paths:
  /:
    get:
      tags:
        - meta
      summary: Request API specification file
      operationId: retrieveApiSpec
      responses:
        "200":
          description: Success
          content:
            application/yaml:
              schema:
                type: string
  /users:
    post:
      tags:
        - users
      summary: Registers a user
      operationId: registerUser
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  $ref: '#/components/schemas/User/properties/username'
                password:
                  $ref: '#/components/schemas/User/properties/password'
      responses:
        "201":
          description: User registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                    description: The token used to authenticate future requests
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/InternalError"
  /users/login:
    post:
      tags:
        - users
      summary: Authenticate a user
      operationId: loginUser
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  $ref: '#/components/schemas/User/properties/username'
                password:
                  $ref: '#/components/schemas/User/properties/password'
      responses:
        '200':
          description: Token authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                    description: The token used to authenticate future requests
        '400':
          $ref: "#/components/responses/BadRequest"
  /users/logout:
    head:
      tags: [users]
      summary: Deauthenticate a user
      operationId: logoutUser
      responses:
        200:
          description: Session token revoked
        400:
          $ref: "#/components/responses/BadRequest"
      security:
        - BearerAuth: []

  # Properties

  /property:
    post:
      tags: [properties]
      summary: Create a property
      operationId: createProperty
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Property"
      responses:
        201:
          description: Created property
        400:
          $ref: "#/components/responses/BadRequest"
      security:
        - BearerAuth: []

  /property/{id}:
    get:
      tags: [properties]
      summary: Get a property by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
            pattern: "^[0-9a-f]{24}$"
          required: true
          example: 5bd3ddfdf20ff91132255496
          description: UUID of the property to get
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Property"
        400:
          $ref: "#/components/responses/BadRequest"
    patch:
      tags: [properties]
      summary: Update a property
      operationId: updateProperty
      parameters:
        - in: path
          name: id
          schema:
            type: string
            pattern: "^[0-9a-f]{24}$"
          required: true
          example: 5bd3ddfdf20ff91132255496
          description: UUID of the property to get
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                address:
                  $ref: "#/components/schemas/Property/properties/address"
                description:
                  $ref: "#/components/schemas/Property/properties/description"
                specification:
                  type: object
                  description: Data that describes properties of the property
                  properties:
                    $ref: "#/components/schemas/Property/properties/specification/properties"
                details:
                  type: object
                  description: More details about a listing
                  properties:
                    $ref: "#/components/schemas/Property/properties/details/properties"
      responses:
        200:
          description: Update Success
        400:
          $ref: "#/components/responses/BadRequest"
      security:
        - BearerAuth: []
  /properties:
    get:
      tags: [properties]
      summary: Get an array of properties
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          example: 0
          description: Offset your search results. Used for pagination.
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          example: 10
          description: Max number of results to return.
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                description: An array of properties
                items:
                  $ref: "#/components/schemas/Property"
        400:
          $ref: "#/components/responses/BadRequest"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: ironfox449
          x-mongoose-index: true
          x-mongoose-unique: true
          description: Username for the user
          minLength: 3
        password:
          type: string
          example: fox_0f_iron3ss
          description: Password for the user
          minLength: 3
    Message:
      type: object
      required:
        - text
        - author
        - recipient
      properties:
        text:
          type: string
          example: "Hello!"
          description: Message contents
        author:
          type: string
          example: 5bd3ddfdf20ff91132255496
          x-mongoose-type: ObjectId
          description: UUID of user that authored the message
        recipient:
          type: string
          example: 5bd3ddfdf20ff91132255496
          x-mongoose-type: ObjectId
          description: UUID of user that received the message
    Property:
      type: object
      required:
        - address
        - price
        - details
        - owner
      properties:
        owner:
          type: string
          example: 5bd3ddfdf20ff91132255496
          x-mongoose-type: ObjectId
          description: ID of the owner of the property
        address:
          type: string
          example: 7266 South Golf Lane
          description: Property's physical address
        price:
          type: number
          example: 1640000
          description: Price of the property in USD
        description:
          type: string
          example: A lovely little house by the beach!
          description: Description of the property
        specification:
          type: object
          description: Data that describes properties of the property
          required:
            - bedrooms
            - bathrooms
            - size
          properties:
            lotSize:
              type: number
              example: 23
              min: 0
              default: 0
              description: Size of the property in acres
            bedrooms:
              type: number
              min: 0
              example: 3
              description: Number of bedrooms
            bathrooms:
              type: number
              min: 0
              example: 2
              description: Number of bathrooms
            size:
              type: number
              example: 4710
              description: Size of the property in squarefeet
        features:
          type: array
          example: ['office', 'pool', 'garage']
          description: Features of the property
          default: []
          items:
            type: string
            enum:
              - office
              - garage
              - fireplace
              - pool
        image:
          type: string
          format: binary
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                description: Human readable error message
                type: string
                example: This is an error message
    InternalError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                description: Human readable error message
                type: string
                example: This is an error message
